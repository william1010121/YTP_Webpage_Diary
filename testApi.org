* Api Test
:PROPERTIES:
:header-args: :host 127.0.0.1:8000 :pretty
:END:

** functions

*** list(user)
#+NAME: list
#+begin_src http :var user="guosw"
POST /api/list
Content-Type: application/json

{
  "user" : "${user}"
}
#+end_src

*** ping()
#+NAME: ping
#+begin_src http
  GET /
#+end_src

*** getProjectList(user)
#+NAME: getProjectList
#+begin_src http :var user="guosw"
  POST /api/get_project_list
  Content-Type: application/json

  {
  "user": "${user}"
  }
#+end_src

*** getProjectStructure(user,projectId)


#+NAME: getProjectStructure
#+begin_src http :var user="guosw" :var projectId="test"
  POST /api/get_structure
  Content-Type: application/json

  {
  "user": "${user}",
  "projectId": "${projectId}"
  }
#+end_src

*** getNodeConfig(user,projectId)
#+NAME: getNodeConfig
#+begin_src http :var user="guosw" :var projectId="test"
  POST /api/get_nodeconfig
  Content-Type: application/json

  {
  "user": "${user}",
  "projectId": "${projectId}"
  }
#+end_src

*** createNode(user,projectId)
#+NAME: createNode
#+begin_src http :var user="guosw" :var projectId="test" :var nodeTitle="New Node"
  POST /api/uploads/create_node
  Content-Type: application/json

  {
  "user": "${user}",
  "projectId": "${projectId}",
  "nodeTitle": "${nodeTitle}"
  }
#+end_src
*** createEdge(user,projectId,StartNode,EndNode)
#+NAME: createEdge
#+begin_src http :var user="guosw" :var projectId="test" :var StartNode="1" :var EndNode="2"
  POST /api/uploads/create_edge
  Content-Type: application/json

  {
  "user": "${user}",
  "projectId": "${projectId}",
  "StartNode": "${StartNode}",
  "EndNode": "${EndNode}"
  }
#+end_src
*** uploadUrl(user,projectId,nodeId,urltype,url,title,content)
#+NAME: uploadUrl
#+begin_src http :var user="guosw" :var projectId="1" :var nodeId="id" :var urlType="type" :var url="url" :var title="title" :var content="content"
  POST /api/uploads/url
  Content-Type: application/json

  {
  "user": "${user}",
  "projectId": "${projectId}",
  "nodeId": "${nodeId}",
  "urlType": "${urlType}",
  "url": "${url}",
  "title": "${title}",
  "content": "${content}"
  }
#+end_src


*** getNode(user,projectId,nodeId)
#+NAME: getNode
#+begin_src http :var user="guosw" :var projectId="test" :var nodeId="id"
  POST /api/get_node
  Content-Type: application/json

  {
  "user": "${user}",
  "projectId": "${projectId}",
  "nodeId": "${nodeId}"
  }
#+end_src

*** importJson(user,projectId,jsonData)
#+NAME: importJson
#+begin_src http :var user="guosw" :var projectId="test" :var jsonData="id"
  POST /api/import/json
  Content-Type: application/json

  {
  "user": "${user}",
  "projectId": "${projectId}",
  "json": ${jsonData}
  }
#+end_src

*** importMarkdown(user,projectId,markdown)
#+NAME: importMarkdown
#+begin_src http :var user="guosw" :var projectId="test" :var markdown="id"
  POST /api/import/markdown
  Content-Type: application/json

  {
  "user": "${user}",
  "projectId": "${projectId}",
  "markdown" : "${markdown}"
  }
#+end_src


** list
*** list  diary
#+CALL: ping()

*** list project
#+CALL: getProjectList(user="guosw")

#+RESULTS:
: {
:   "project-length": 3,
:   "projects": [
:     "test-graph",
:     "test",
:     "test-upload-url"
:   ]
: }

*** get project structure
#+CALL: getProjectStructure(user="guosw",projectId="test")


*** get node config
#+CALL: getNodeConfig(user="guosw",projectId="test")

#+RESULTS:
: {
:   "nodeconfig": {
:     "K": 200
:   }
: }

*** Test New Node
#+CALL: createNode(user="guosw",projectId="test-graph",nodeTitle="Test")

#+RESULTS:
: {
:   "message": "Node created with ID MTRjG",
:   "ID": "MTRjG"
: }

#+CALL: getProjectStructure(user="guosw",projectId="test-graph")

#+RESULTS:
#+begin_example
{
  "structure": {
    "ywSot": [],
    "nodeTitle": {
      "ywSot": "Root",
      "MTRjG": "Test"
    },
    "MTRjG": []
  }
}
#+end_example

*** Test Create Edge
#+CALL: createEdge(user="guosw",projectId="test-graph",StartNode="TxXjF",EndNode="ICgHx")

*** Test upload url
#+CALL: getProjectStructure(user="guosw",projectId="test-upload-url")

#+RESULTS:
: {
:   "structure": {
:     "UGHdi": [],
:     "nodeTitle": {
:       "UGHdi": "Root"
:     }
:   }
: }

#+CALL: uploadUrl(user="guosw",projectId="test-upload-url",nodeId="vPyyI",urlType="important",title="Test upload url",content="This is the Content")
*** Ttest Get Node
#+CALL: getProjectStructure(user="guosw",projectId="test-upload-url")

#+RESULTS:
: {
:   "structure": {
:     "UwzGz": [],
:     "nodeTitle": {
:       "UwzGz": "Root"
:     }
:   }
: }

#+CALL: getNode(user="guosw",projectId="test-upload-url",nodeId="UwzGz")

#+RESULTS:
#+begin_example
{
  "node": {
    "ID": "UwzGz",
    "title": "Root",
    "important_Data": [],
    "relate_Data": [],
    "other_Data": [],
    "Summary": ""
  }
}
#+end_example

*** Test import Json
#+NAME: JsonData
#+begin_example json
 {
  "Graph": {
  	"1":[],
  	"2":["3","8"],
  	"3":["4","5","6","7"],
  	"4":[],
  	"5":[],
  	"6":[],
  	"7":[],
  	"8":[],
  	"9":["10","11","12","13","14"],
  	"10":[],
  	"11":[],
  	"12":[],
  	"13":[],
  	"14":[]
  },
  "Node": {
  "1": {
  "Title": "localStorage",
  "Content": ""
  },
  "2": {
  "Title": "JavaScript localStorage 簡介",
  "Content": "localStorage 是 Web Storage API 的一部分，允許在使用者的瀏覽器中儲存資料。與 cookies 不同，localStorage 提供更大的儲存空間，且資料不會隨每個 HTTP 請求傳送。\n"
  },
  "3": {
  "Title": "基本使用方法",
  "Content": ""
  },
  "4": {
  "Title": "儲存資料",
  "Content": "```localStorage.setItem('key', 'value')```\n"
  },
  "5": {
  "Title": "取得資料",
  "Content": "```const value = localStorage.getItem('key')```\n"
  },
  "6": {
  "Title": "移除資料",
  "Content": "```localStorage.removeItem('key')```\n"
  },
  "7": {
  "Title": "清除所有資料",
  "Content": "```localStorage.clear()```\n"
  },
  "8": {
  "Title": "範例",
  "Content": "```javascript\n// 儲存使用者名稱\nlocalStorage.setItem('username', 'JohnDoe');\n\n// 取得使用者名稱\nconst username = localStorage.getItem('username');\nconsole.log(username); // 輸出: JohnDoe\n\n// 移除使用者名稱\nlocalStorage.removeItem('username');\n\n// 清除所有 localStorage 資料\nlocalStorage.clear();\n```\n\n---"
  },
  "9": {
  "Title": "示範例子",
  "Content": ""
  },
  "10": {
  "Title": "Save",
  "Content": "```javascript=\nfunction saveData(name, information, Emoji, currentItemId) {\n// save the name and infomation\n// and the itemId\n// and update the newest itemId\nlocalStorage.setItem('globalItemId', itemId);\n\nconst data = {\nname: name,\ninformation: information,\nEmoji: Emoji,\nitemId: currentItemId,\n};\n\nlocalStorage.setItem(`data-${currentItemId}`, JSON.stringify(data));\n};\n```\n"
  },
  "11": {
  "Title": "Set when On load",
  "Content": "```javascript=\nwindow.onload = function() {\n// load the data from local storage\n// and display it on the page\nconst globalItemId = localStorage.getItem('globalItemId');\nitemId = globalItemId ? parseInt(globalItemId)+1 : 0;\nfor (let i = 0; i < itemId; i++) {\nconst data = localStorage.getItem(`data-${i}`);\nif (data) {\nconst { name, information, Emoji, itemId } = JSON.parse(data);\nLine.insertAdjacentHTML('beforeend', `\n<div id='div-${itemId}'>\n(ID is${itemId}) <span id='btn-${itemId}-Emoji'> ${Emoji}</span><span id='btn-${itemId}-name'>${name}</span>:<br>\n&nbsp;&nbsp;&nbsp;<span id='btn-${itemId}-info'>${information}</span><br><br>\n<button id='btn-${itemId}-delete'>❌</button>\n<button id='btn-${itemId}-modify'>🔄</button>\n</div>\n`);\naddRemoveButtonEvent(itemId);\naddModifyButtonEvent(itemId);\n}\n}\n};\n```\n"
  },
  "12": {
  "Title": "List",
  "Content": "```javascript=\nfunction listLocalStorageData() {\n// Iterate over all keys in localStorage\nfor (let i = 0; i < localStorage.length; i++) {\n// Get the key at the current index\nconst key = localStorage.key(i);\n// Retrieve the value associated with the key\nconst value = localStorage.getItem(key);\n// Log the key-value pair to the console\nconsole.log(`${key}: ${value}`);\n}\n}\n\n// Call the function to list all data\nlistLocalStorageData();\n```\n\n\n"
  },
  "13": {
  "Title": "作業",
  "Content": "``````\n\n\n"
  },
  "14": {
  "Title": "白板",
  "Content": "https://www.tldraw.com/r/5rRLPMxAKDyHve77uQKMp?d=v-1382.653.4600.2840.6OGm41dEfwHX5iZLAwj_Z\n\n\n\n\n\n\n\n<!-- 做一個屬於自己的介紹頁面 -->"
  }
  }
  }
#+end_example

#+begin_src python :var json=JsonData
  print((json))
#+end_src

#+RESULTS:
: None

#+CALL: importJson(user="guosw",projectId="test-import-json",jsonData=JsonData)

*** Test import markdown
#+NAME: MarkdownData
#+begin_example md
# 想法
有一個地方是可以讓你自動上傳每天的瀏覽記錄的，可能跟加上一個跟收藏一樣的按鈕，然後按了之後就當他讀進去了，然後可能每天晚上的時候就透過AI自動整理內容，然後每天一起床就會有昨天學的東東


## 實作

1. 有一個後端server提供`api`
    - `/api/{user}/upload/{type}`
        - 目前只打算先做`type: url`
    - `/api/{user}/index/{date}`
        - 獲取某一天的`list`
2. 一個網頁可以看到
    - 每天的網址列表
    - 每天結束之後的
        - 每個網址的小總結
        - 一整天下來的總結
3. 一個`chrome plugin`
    - 負責自動的加入網址
    - 透過合後端的`api`互動來幫`user`加入資料

## 有關`chrome plugin`

因為我發現我在找資料的時候，最後真的有價值的都是在某些特定的網站上面
ex:
1. `stackoverflow`
2. `reddit`
3. `hackmd`

所以`google plugin`可以有兩種方式
1. 使用者呼叫`google plugin`並且手動的將網址加入
2. 可以再進入到某一個網站的時候就讓`google plugin`自動將這個網頁加入（或著可能進入到這個網頁的時候就彈出確認窗(按y就儲存n就不儲存)



# QA


1. 每次發想前可以先想想一些問題目標使用者? 市面上有做過類似的? 有的話你的商品優勢會在哪裡? 沒有的話，功能可行性分析...等等。

`Ans:`
`目標使用者`: 每天會透過瀏覽器搜尋大量資訊的人(ex:程序員)
`類似的`: 
 - 目前沒有找到，有單個網頁的`AI summarize`，但沒有找到有上述功能的
 - 如果是`save to notion`的話，我們的優勢可能在於
     1. 可以自動的將特定的網網站自動加入
     2. 如果是透過提供`api`的方式的話，那麼只要有人寫了相關的插件，就可以直接調用


---


2. 聽起來類似於筆記整理並自動分類，並產出可以重複複習回顧的紀錄檔案，我目前想的問題是，瀏覽紀錄應該只侷限網頁的話，想問線上的pdf、影像、影像會有加入整理的需求範圍? 每日的瀏覽紀錄並不一定是使用者想進行分析的，那會如何選擇(是否能自動化?)?  AI整理結果要怎樣符合使用者所想要的或是可以供客製? 瀏覽紀錄的隱私問題...這應該是每個用大語言模型會被問到的...

`Ans`:
1. 如果`抓url`的功能實現的話，線上的`pdf`, `影像`應該就只是在後端增加對應的`api`
2. 選擇的部分就是會有
    - 遇到特定網站的時候自動加入
    - 使用者可以透過快捷鍵(ex: ctrl-alt-s) 快速加入
3. `AI` 的整理結果客製化
    - 可能可以讓使用者自定義prompt
    - 可能可以混合`戰地記者與閃光彈`他們這組的檔案分類，在接收到網址之後可以先自動分類，或著讓使用者育先建立好他們想要的分類(ex: 經濟學, 程式, ....)，然後`AI`

---


3. 分享之前的經驗，使用Save to Notion外掛，可接將網頁資料選取後儲存於notion，並加上chatGPT分析做資料處理，但這邊就是使用者自主圈選內容並非自動化整理，供參考。

最後...如果是簡單的摘要，文章整理模型應該有機會可以地端執行，效能也高，就能避開上傳到server的隱私問題，成本就是硬體設備還有你們評估他產出內容的結果。



---

# 目前找解決資料的時候會遇到的問題

- 搜到解答之後下次遇到同樣的問題就忘記了
    - 同樣的問題卻需要搜尋了很多次

- 搜尋到一半的時候會忘記自己原本的問題

- 應該要有兩個prompt
    - 總結
    - 生成教學
---

# 一些發想

- 對於某個領域的資訊
    - 可能可以將目前的連結跟檔案都搜集起來，交給AI來先總結出結果
        1. 直接使用Google 的 Notebook LLM

#+end_example


#+CALL: importMarkdown(user="guosw", projectId="test-import-markdown",markdown=MarkdownData)

#+RESULTS:
